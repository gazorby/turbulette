# Adapted from https://github.com/python-gino/gino/blob/master/.github/workflows/test.yml

name: test
on:
  push:
    branches:
      - master
      - ci/*
      - v*.*.x
    tags:
    - 'v*.*.*'
  pull_request:
    branches:
      - master
      - develop
      - v*.*.x

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ '3.6', '3.7', '3.8' ]
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ""
          POSTGRES_HOST_AUTH_METHOD: trust
          POSTGRES_DB: test
        ports:
        - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      - name: virtualenv cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-${{ matrix.python-version }}-venv-${{ hashFiles(format('{0}{1}', github.workspace, '/poetry.lock')) }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-venv-
      - name: Poetry cache
        uses: actions/cache@v2
        with:
          path: ~/.poetry
          key: ${{ runner.os }}-${{ matrix.python-version }}-dotpoetry
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-dotpoetry-
      - name: Install Python dependencies
        run: |
          curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python
          $HOME/.poetry/bin/poetry install --no-interaction
      - name: List installed packages
        run: |
            $HOME/.poetry/bin/poetry run pip list
      - name: test
        env:
            DB_DRIVER: postgresql
            DB_HOST: localhost
            DB_PORT: 5432
            DB_USER: postgres
            DB_PASSWORD: ""
            PYTEST_TURBULETTE_SETTINGS: tests.settings
        run: |
          $HOME/.poetry/bin/poetry run pytest --cov=turbulette --ignore ./tests/turbulette_tests/cli --cov-report xml
          $HOME/.poetry/bin/poetry run pytest --cov=turbulette --cov-append ./tests/turbulette_tests/cli --cov-report xml
      - name: lint
        run: |
          $HOME/.poetry/bin/poetry run black --check .
          $HOME/.poetry/bin/poetry run mypy turbulette --ignore-missing-imports
      - name: coverage
        uses: codacy/codacy-coverage-reporter-action@master
        with:
          project-token: ${{ secrets.CODACY_TOKEN }}
          coverage-reports: coverage.xml

  release:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        python-version: [ '3.8' ]
    steps:
    - name: Checkout source code
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/checkout@v2
    - name: Set up Python
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Release to PyPI
      if: startsWith(github.ref, 'refs/tags/')
      env:
        PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
      run: |
        curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python
        $HOME/.poetry/bin/poetry install --no-interaction --no-dev
        $HOME/.poetry/bin/poetry build
        $HOME/.poetry/bin/poetry publish --username __token__ --password ${{ secrets.PYPI_TOKEN }}
