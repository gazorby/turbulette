extend type Mutation {
  createUser(input: CreateUser!): CreateUserPayload
  addBook: BookActionsPayload @scope(is_staff: true)
  borrowBook: BookActionsPayload @scope(permissions:"book:borrow")
  createBook(input: CreateBookInput): BookPayload!
}

extend type Query {
  books: BooksPayload @access_token_required
  book(id: ID!): BookPayload
  exclusiveBooks: BooksPayload @access_token_required
}

type User {
  id: ID!
  email: String!
  active: Boolean!
  username: String!
  firstName: String!
  lastName: String!
  birth: DateTime
  dateJoined: DateTime!
  lastLogin: DateTime
}

type CreateUserPayload {
  user: User
  token: String
  errors: [String]
}

input ProfileInput {
  genre: [String]
  awards: [String]
}

input CreateBookInput {
  title: String!
  author: String!
  publicationDate: DateTime!
  profile: JSON
}

type Profile {
  genre: [String]
  awards: [String]
}

type Book {
  id: ID!
  title: String!
  author: String!
  publicationDate: DateTime!
  profile: Profile
}

type BookPayload {
  book: Book
  errors: [String]
}

type BooksPayload {
  books: [Book]
  errors: [String]
}

type BookActionsPayload {
  success: Boolean
  errors: [String]
}

input CreateUser {
  username: String!
  email: String!
  passwordOne: String!
  passwordTwo: String!
  firstName: String
  lastName: String
}

input Login {
  username: String!
  password: String!
}
